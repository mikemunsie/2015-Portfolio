{>"layouts/blog/blog"/}
{<title}Simply simple CSS.{/title}
{<date}08/30/2011{/date}
{<content}
<p>First and foremost I like to disagree with certain standards, or more-so the fact of being comfortable with doing things in a complicated fashion. I enjoy simplicity and I also firmly believe that there is alwaysan easier way of doing things. Granted most of the time to enjoy the simple things in life you have to do something complicated, but it sure is worth it :)</p>

<div>Lets get right to it.</div>

<div>&nbsp;</div>

<div>The problem that maybe you or someone you know is probably the frustration involved with CSS and relative or absolute URLS. If you are like me, you enjoy relative positioning because it allows you to have multiple sites in one directory, but then you have things like &quot;../../../../&quot; and that doesn&#39;t look too clean. Plus, having to remember where you are constantly just doesn&#39;t seem like the best idea.</div>

<div>&nbsp;</div>

<div>Perhaps you are the type of programmer that simply says absolute urls are the way to go - &quot;/public/img/folder/&quot; is the best route because it allows you to specifically say this file goes here and here is the direct path... well what happens if you want to have a server that has multiple sites? Do you create a subdomain each time? Do you work on your production server just to make a change? What about locally - isn&#39;t it frustrating to work with a company that has multiple sites and you have to clear your htdocs folder each and every single time?</div>

<div>&nbsp;</div>

<div>I did not like this at all and this is why I developed this concept of the &quot;_public&quot; and &quot;vendors&quot; shortcuts. Here is what I mean:</div>

<div>&nbsp;</div>

<div>EX 1) Not using the &quot;_public&quot; shortcut.</div>

<div>.img { background:url(&#39;/public/img/test.jpg&#39;); /* OR */ }</div>

<div>.img { background:url(&#39;../public/img/test.jpg&#39;); }</div>

<div>&nbsp;</div>

<div>EX 2) Using the new &quot;_public&quot; shortcut.</div>

<div>.img {background:url(&#39;_public/img/test.jpg&#39;); }</div>

<div>&nbsp;</div>

<div>The new technique eliminates having to say &quot;/public&quot; or &quot;../&quot; public because it knows where the public folder is in your .htaccess file. This shortcut also works for images and everything else because it simply says any instance of &quot;_public&quot; will be replaced with the actual location of the public folder according your .htaccess.</div>

<div>&nbsp;</div>

<div>Now my web server can look like this:</div>

<div>&nbsp;</div>

<div>Before</div>

<pre class="brush:js">
[app]
[core]
[public]
</pre>

<div>Now</div>

<pre class="brush:js">
[site 1]
  [app]
  [core]
  [public]
[site 2]
  [app]
  [core]
  [public]
</pre>

<div>&nbsp;</div>

<div>No more creating sub-domains or any other hacks to have multiple sites. Simply work locally and push online to wherever you need. Plus by combining this with the BASE tag, you get completely portable sites. It makes my life easier and i&#39;m sure by utilizing this technique you can to. It&#39;s the secret sauce to many things I do, but also what makes the framework I have developed so unique. It&#39;s not standard and probably won&#39;t ever be, but sometimes it&#39;s nice to see that there is actually easier ways to handle things.</div>

<div>&nbsp;</div>

<div>Here&#39;s the code:</div>

<div>&nbsp;</div>

<pre class="brush:php">
RewriteRule ^vendors/(.*)$ public/vendors/$1 [L]
RewriteRule ^(.*)/vendors/(.*)$ public/vendors/$2 [L]
RewriteRule ^(.*)/_public/(.*)$ public/$2 [L]
RewriteRule ^_public/(.*)$ public/$1 [L]
</pre>

<div>&nbsp;</div>

<div>I am not an expert at writing .htaccess files, but I can safely this works and I have tested it many times. Cheers!</div>

{/content}