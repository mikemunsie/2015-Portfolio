{>"layouts/blog/blog"/}
{<title}Improving the MunstroJS Engine{/title}
{<date}03/21/2012{/date}
{<content}
<p>Keeping JavaScript structured and organized is a challenge. As part of my daily tasks as a web developer, I am constantly utilizing different plugins such as Fancybox, Datatables, JQueryUI, and so much more. In order to use a plugin you must import the JS and the CSS - so with that a few months ago I had this idea to import vendors with a simple line of code that included both the CSS and JS, but the only problem is that dynamically loading the CSS for the plugin can look choppy. So what I started doing instead was I placed the Plugin CSS in my main stylesheet and just dynamically import the JavaScript. I would have something like:</p>

<pre class="brush:js">
munstro.import([&#39;jqueryui&#39;,&#39;fancybox&#39;], function()&#123; /* done */ });</pre>

<p>The only problem is that in order to load &quot;jqueryui&quot; or &quot;fancybox&quot;, I would run a switch statement and then find the JS file from there:</p>

<pre class="brush:js">
...
  switch(vendor)&#123;
    case &quot;fancybox&quot;:
      munstro.import_js(&quot;vendors/js/fancybox/fancybox.jquery.js&quot;, 
      function()&#123; /* recursion */ 
    });
  }
</pre>

<p>So a few days ago I had a solution, and it just made too much sense. Instead of having this long switch statement for each vendor, why don&#39;t I have just one line of code that simply says &quot;import [vendor_name] from [vendors_folder] and load in the [vendor_name].js&quot; - bam. No more switch statements. If I wanted to load &quot;fancybox&quot; it would search for the folder &quot;vendors/js/fancybox&quot; and then find the file &quot;fancybox.js&quot; and load it in. Now I have incredibly easy access to my vendor scripts... now only if I can structure the CSS better life would be wine.</p>
{/content}